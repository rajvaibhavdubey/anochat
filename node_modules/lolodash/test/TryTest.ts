import 'mocha';
import { expect } from 'chai';
import __ from '../index';
import User from './User';
import UserFactory from './UserFactory';

const userFactory = new UserFactory();

describe('Try', () => {
    describe('#isSuccess', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .isSuccess;
            
            expect(result).to.equal(true);
        });
    });
    describe('#isFailure', () => {
        it('should return true when fails', () => {
            let result = __<User>(() => userFactory.create('Jack').throwError())
                            .isFailure;

            expect(result).to.equal(true);
        });
    });
    describe('#value', () => {
        it('should return "Jack" when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .value;
            
            expect(result.name).to.equal('Jack');
        });
    });
    describe('#get()', () => {
        it('should return "Jack" when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .get();
            
            expect(result.name).to.equal('Jack');
        });
    });
    describe('#map()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map((e) => e.name)
                            .map((e) => e.substr(-1) === 'k')
                            .value

            expect(result).to.equal(true);
        })
    });
    describe('#flatMap()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map((e) => e.name)
                            .flatMap((e) => e.substr(-1) === 'k')
                            .value

            expect(result).to.equal(true);
        })
    });
    describe('#getOrDefault()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map(e => e.throwError())
                            .getOrDefault();
            
            expect(result.name).to.equal('John');
        });
    });
    describe('#getOrElse()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map(e => e.throwError())
                            .getOrElse(userFactory.create('John'))
            
            expect(result.name).to.equal('John');
        });
    });
    describe('#orElse()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map(e => e.throwError())
                            .orElse(() => userFactory.create('John'))
                            .value;
            
            expect(result.name).to.equal('John');
        });
    });
    describe('#recover()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .map(e => e.throwError())
                            .recover(() => userFactory.create('John'));
            
            expect(result.isSuccess).to.equal(true);
            expect(result.get().name).to.equal('John');
        });
    });
    describe('#filter()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .filter(e => e.name === 'Jack');
            
            expect(result.isSuccess).to.equal(true);
        });
    });
    describe('#set()', () => {
        it('should return true when succeeds', () => {
            let result = __<User>(() => userFactory.create('Jack'))
                            .set(e => e.name = 'John')
                            .get();
            
            expect(result.name).to.equal('John');
        });
    });
});